{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAsB5C,OACI,mCACG,sBAAMC,SAhBQ,SAAEC,GAEnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MASf,SACK,uBACIO,KAAK,OACLC,MAAUT,EACVU,SAxBU,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,e,+BCNjBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEfC,EAFe,0FAE2EC,UAAUH,GAFrF,sBAGFI,MAAOF,GAHL,cAGfG,EAHe,gBAIAA,EAAKC,OAJL,uBAIdC,EAJc,EAIdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXrB,kBAgBdM,GAhBc,4CAAH,sDCATO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAElC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBxC,OAZCC,qBAAW,WACRxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGrB,CAACpB,IAIEqB,EDfkBK,CAAc1B,GAA/BO,EAF6B,EAE7BA,KAAMa,EAFuB,EAEvBA,QAEd,OACI,qCACI,qBAAIJ,UAAU,wCAAd,cAAyDhB,EAAzD,OAEEoB,GAAW,wCAEb,qBAAKJ,UAAU,YAAf,SAEYT,EAAKE,KAAK,SAAAC,GAAG,OACT,cAAC,EAAD,eAESA,GADCA,EAAIC,aEiB3BgB,EA9BM,WAAO,IAAD,EAGazC,mBAAS,CAAE,cAHxB,mBAGhB0C,EAHgB,KAGJ3C,EAHI,KAWvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACxB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCnB9B6B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.c42bca54.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = ( e ) => {\n\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2 ) {\n\n            setCategories( cats => [inputValue, ...cats]);\n            setInputValue('');\n\n        }\n\n        \n    }\n\n    return (\n        <>\n           <form onSubmit = { handleSubmit }>\n                <input \n                    type=\"text\"\n                    value = { inputValue }\n                    onChange={ handleInputChange}\n                />\n            </form> \n        </>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\n\n  export const getGifs = async ( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=NytAqBzyhGkTAuMIaKxwwrcmeSt6o2Ts&q=${ encodeURI(category) }&limit=10`;\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n\n    });\n\n    return gifs;\n\n}","import React from 'react'\n\nexport const GifGridItem = ( { title, url } ) => {\n\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data, loading} = useFetchGifs( category );\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__rubberBand\"> { category } </h3>\n\n            { loading && <p>Loading</p> }\n\n            <div className=\"card-grid\">\n                    {\n                        data.map( img => (\n                            <GifGridItem\n                                key={ img.id }   \n                                { ...img  }\n                            />\n                        ))\n                    }\n\n            </div>\n        \n        </>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n     useEffect( () => {\n        getGifs( category )\n            .then( imgs => {\n                setstate({\n                    data: imgs,\n                    loading: false\n                })\n            })\n     }, [category]);\n\n  \n\n    return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n// import PropTypes from 'prop-types'\n\nconst GifExpertApp = () => {\n\n\n    const [categories, setCategories] = useState([ 'One Punch' ]);\n\n    /*const handleAdd = () => {\n\n        setCategories([...categories, 'Ranma 1/2']);\n\n    } */\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories = { setCategories }/>\n            <hr />\n\n            <ol>\n                {   \n                    categories.map( category =>  \n                    <GifGrid \n                        key={ category }\n                        category={ category }\n                    />)\n                }\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}